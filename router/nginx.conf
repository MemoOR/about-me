# turn off daemonization since we're running in a container
daemon off;

user nginx;
worker_processes auto;
error_log /dev/stdout;
pid /var/run/nginx.pid;

events {
  worker_connections 1024;
}


http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  real_ip_recursive on;
  real_ip_header   X-Forwarded-For;
  proxy_set_header X-Forwarded-For $remote_addr;

  log_format  main  '$host $remote_addr - $remote_user [$time_local] "REDACTED" '
                    '$status $body_bytes_sent "REDACTED" '
                    '"$http_user_agent" "$http_x_forwarded_for" "$http_origin"';

  access_log        /dev/stdout main;
  sendfile          on;
  keepalive_timeout 65;
  proxy_read_timeout 300;
  server_tokens off;

  map $upstream_http_request_id $custom_request_id {

    # Set the $custom_request_id variable with the original
    # response header from the upstream server if it exists
    "~."    $upstream_http_request_id;

    # Otherwise set it with this value
    default $request_id;
  }

  # Strip leading www from http/https & send to https
  server {
    listen      80;
    listen      [::]:80;
    listen      443 ssl http2;
    listen      [::]:443 ssl http2;

    server_name ~^www\.(?<domain>.+)$;
    return  301 https://$domain$request_uri;

    include _template/ssl.conf;
    include _template/hsts.conf;
  }

  # default redirect http -> https
  server {
    listen      80 default_server;
    listen      [::]:80 default_server;
    # Using a regex match for catchall to avoid matching before ^www regex
    server_name ~.;

    return 301 https://$host$request_uri;
    include _template/hsts.conf;
  }

  # catchall empty server for missing Host entry
  server {
    listen      80;
    listen      443 ssl http2;
    server_name "";

    include _template/ssl.conf;

    location /_ping {
      include _template/httpok.conf;
    }

    location / {
      return 404 "who?\n";
    }
  }
}
# turn off daemonization since we're running in a container
daemon off;

user nginx;
worker_processes auto;
error_log /dev/stdout debug;
pid /var/run/nginx.pid;

events {
  worker_connections 1024;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  log_format main '$remote_addr - $remote_user [$time_local] '
  '"$request" $status $body_bytes_sent '
  '"$http_referer" "$http_user_agent" "$gzip_ratio"'
  '"$http_x_forwarded_for" "$http_origin"';

  access_log /dev/stdout main;
  sendfile on;
  keepalive_timeout 10;
  proxy_read_timeout 300;
  server_tokens off;

  map $upstream_http_request_id $custom_request_id {

    # Set the $custom_request_id variable with the original
    # response header from the upstream server if it exists
    "~." $upstream_http_request_id;

    # Otherwise set it with this value
    default $request_id;
  }

  # default redirect http -> https
  server {
    listen 80 default_server;
    listen [::]:80 default_server;
    http2 on;
    server_name _;
    include _template/hsts.conf;

    location /.well-known/acme-challenge/ {
      root /var/www/certbot;
    }

    location / {
      return 301 https://$host$request_uri;
    }
  }

  upstream flask_app {
    server appweb:7168;
  }

  # HTTPS server block
  server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;

    # SSL configuration here
    include _template/ssl.conf;
    include _template/hsts.conf;

    location /.well-known/acme-challenge/ {
      root /var/www/certbot;
    }

    location / {
      include _template/proxy.conf;
      proxy_pass https://flask_app;
    }

    error_page 502 503 504 /down.html;
    location = /down.html {
      root /usr/share/nginx/html;
      include _template/hsts.conf;
      include _template/requestid.conf;
    }

  }
}